#!/system/bin/sh

DEFAULT_PREFS=/system/AdvBoot/prefs/boot.prefs
SYSTEM_PREFS=/system/boot.prefs
ADVBOOT_WORK=/sdcard/AdvancedBoot
USER_PREFS=$ADVBOOT_WORK/boot.prefs
ADVBOOT_BACKUP=$ADVBOOT_WORK/backup.tar
ADVBOOT_LOG=/data/advboot.log
DATE=$(date)
ABI=$(grep ro.product.cpu.abi= /system/build.prop | dd bs=1 skip=19 count=3)
ABI2=$(grep ro.product.cpu.abi2= /system/build.prop  | dd bs=1 skip=20 count=3)
if [ "$ABI" = "arm" ]; then ARCHITECTURE=arm; fi
if [ "$ABI2" = "arm" ]; then ARCHITECTURE=arm; fi
if [ "$ABI" = "x86" ]; then ARCHITECTURE=x86; fi
if [ "$ABI2" = "x86" ]; then ARCHITECTURE=x86; fi
if [ "$ABI" = "x64" ]; then ARCHITECTURE=x64; fi
if [ "$ABI2" = "x64" ]; then ARCHITECTURE=x64; fi
if [ -e /system/bin/mount ] 
then
	MOUNT="/system/bin/mount"
else
	if [ -e /system/xbin/busybox ]
	then
		MOUNT="/system/xbin/busybox mount"
	else
		if [ -e /system/AdvBoot/xbin/busybox-$ARCHITECTURE ]
		then
			MOUNT=/system/AdvBoot/xbin/busybox-$ARCHITECTURE mount
		fi
	fi
fi
if [ -e /system/bin/busybox ] 
then
	BUSYBOX=/system/bin/busybox
else
	if [ -e /system/xbin/busybox ] 
	then
		BUSYBOX=/system/xbin/busybox
	else
		BUSYBOX=/system/AdvBoot/xbin/busybox-$ARCHITECTURE
	fi
fi

$MOUNT -o remount,rw /system
$MOUNT -o remount,rw /data
chmod 0775 $BUSYBOX

mkdir -p $ADVBOOT_WORK
chmod 777 $ADVBOOT_WORK

chmod 777 $DEFAULT_PREFS
sh "$DEFAULT_PREFS"
BOOTPREFS=$DEFAULT_PREFS
if [ -e "$SYSTEM_PREFS" ] 
then
	chmod 777 $SYSTEM_PREFS
	sh "$SYSTEM_PREFS"
	BOOTPREFS=$SYSTEM_PREFS
else
	cp -f $DEFAULT_PREFS $SYSTEM_PREFS
	chmod 777 $SYSTEM_PREFS
	sh "$SYSTEM_PREFS"
	BOOTPREFS=$SYSTEM_PREFS
fi
AdvancedBootUserConfigurable=$(grep AdvancedBootUserConfigurable= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
if [ $AdvancedBootUserConfigurable == 1 ]
then
	if [ -e "$USER_PREFS" ]
	then
		chmod 777 $USER_PREFS
		sh "$USER_PREFS"
		BOOTPREFS=$USER_PREFS
	else
		if [ -e "$SYSTEM_PREFS" ] 
		then
			cp -f "$SYSTEM_PREFS" "$USER_PREFS"
			chmod 777 $USER_PREFS
		else
			cp -f "$DEFAULT_PREFS" "$USER_PREFS"
			chmod 777 $USER_PREFS
		fi
		sh "$USER_PREFS"
		BOOTPREFS=$USER_PREFS
	fi
fi

AdvancedBootEnabled=$(grep AdvancedBootEnabled= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
if [ $AdvancedBootEnabled == 1 ]
then
	echo "running advanced boot"
else
	echo "advanced boot disabled" >> $ADVBOOT_LOG
	echo "exiting advanced boot" >> $ADVBOOT_LOG
	exit
fi

AdvancedBootEnableAutoRestore=$(grep AdvancedBootEnableAutoRestore= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
if [ $AdvancedBootEnableAutoRestore == 1 ]
then
	if [ ! -e $ADVBOOT_LOG ]
	then
		if [ -e $ADVBOOT_BACKUP ]
		then
			tar -xf $ADVBOOT_BACKUP
			cp $ADVBOOT_WORK/advboot.log $ADVBOOT_LOG
			echo "autorestore process complete" >> $ADVBOOT_LOG
		fi
	fi
fi
AdvancedBootEnableManualRestore=$(grep AdvancedBootEnableManualRestore= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
if [ $AdvancedBootEnableManualRestore == 1 ]
then
	if [ -e $ADVBOOT_BACKUP ]
	then
		tar -xf $ADVBOOT_BACKUP
		echo "manual restore process complete" >> $ADVBOOT_LOG
	else
		echo "no backup detected" >> $ADVBOOT_LOG
		echo "skipping process" >> $ADVBOOT_LOG
	fi
	$BUSYBOX sed -i s/AdvancedBootEnableManualRestore=1/AdvancedBootEnableManualRestore=0/g $BOOTPREFS
fi

echo "starting advanced boot log at $DATE $TIME" >> $ADVBOOT_LOG
echo "system and data remounted as rw" >> $ADVBOOT_LOG
echo "applied $BOOTPREFS preferences" >> $ADVBOOT_LOG

AdvancedBootInitd=$(grep AdvancedBootInitd= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
AdvancedBootInitdPath=$(grep AdvancedBootInitdPath= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
AdvancedBootExternalInitd=$(grep AdvancedBootExternalInitd= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
AdvancedBootExternalInitdPath=$(grep AdvancedBootExternalInitdPath= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
AdvancedBootEnableBootAnimation=$(grep AdvancedBootEnableBootAnimation= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
AdvancedBootEnableBootSounds=$(grep AdvancedBootEnableBootSounds= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
AdvancedBootNoCallDelay=$(grep AdvancedBootNoCallDelay= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
AdvancedBootImproveMediaQuallity=$(grep AdvancedBootImproveMediaQuallity= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
AdvancedBootEnableWmaPlayback=$(grep AdvancedBootEnableWmaPlayback= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
AdvancedBootEnableWmvPlayback=$(grep AdvancedBootEnableWmvPlayback= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
AdvancedBootEnableFasterStreaming=$(grep AdvancedBootEnableFasterStreaming= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
AdvancedBootEnableAdbNotification=$(grep AdvancedBootEnableAdbNotification= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
AdvancedBootBatteryTweaks=$(grep AdvancedBootBatteryTweaks= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
AdvancedBootSdcardReadAhead=$(grep AdvancedBootSdcardReadAhead= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
AdvancedBootSdcardReadAheadValue=$(grep AdvancedBootSdcardReadAheadValue= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
AdvancedBootEnableBackup=$(grep AdvancedBootEnableBackup= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
AdvancedBootBackupUserSettings=$(grep AdvancedBootBackupUserSettings= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
AdvancedBootBackupBatteryStats=$(grep AdvancedBootBackupBatteryStats= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
AdvancedBootBackupPhilzSettings=$(grep AdvancedBootBackupPhilzSettings= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
AdvancedBootBackupDownloadedApps=$(grep AdvancedBootBackupDownloadedApps= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
AdvancedBootBackupBluetoothSettings=$(grep AdvancedBootBackupBluetoothSettings= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
AdvancedBootBackupWifiSettings=$(grep AdvancedBootBackupWifiSettings= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
AdvancedBootEnableManualRestore=$(grep AdvancedBootEnableManualRestore= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
AdvancedBootEnableAutoRestore=$(grep AdvancedBootEnableAutoRestore= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
AdvancedBootDalvikToCache=$(grep AdvancedBootDalvikToCache= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
AdvancedBootDpiModding=$(grep AdvancedBootDpiModding= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
AdvancedBootCustomDpi=$(grep AdvancedBootCustomDpi= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
AdvancedBootUseGoogleDns=$(grep AdvancedBootUseGoogleDns= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
AdvancedBootEnableFastReboot=$(grep AdvancedBootEnableFastReboot= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
AdvancedBootIncreaseResponse=$(grep AdvancedBootIncreaseResponse= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
AdvancedBootSysPerformanceTweaks=$(grep AdvancedBootSysPerformanceTweaks= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
AdvancedBootEnableDalvikBitcode=$(grep AdvancedBootEnableDalvikBitcode= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
AdvancedBootEnableSystemAutomount=$(grep AdvancedBootEnableSystemAutomount= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)
AdvancedBootEnableDataAutomount=$(grep AdvancedBootEnableDataAutomount= $BOOTPREFS | $BUSYBOX cut -d '=' -f2)

if [ $AdvancedBootInitd == 1 ]
then
	if [ -e  /system/AdvBoot/initran ]
	then
		echo "init.d ran already" >> $ADVBOOT_LOG
		echo "skipping init.d execution" >> $ADVBOOT_LOG
		rm -rf /system/AdvBoot/initran
	else
		if [ -e $AdvancedBootInitdPath ]
		then
			echo "running init.d scripts" >> $ADVBOOT_LOG
			$BUSYBOX run-parts $AdvancedBootInitdPath
		else
			$BUSYBOX mkdir -p $AdvancedBootInitdPath
			cp -f /system/AdvBoot/00ADVBOOTINIT $AdvancedBootInitdPath
			chmod -r 777 $AdvancedBootInitdPath
		fi
	fi
fi	
if [ $AdvancedBootExternalInitd == 1 ]
then
	if [ -e /system/AdvBoot/extinitran ]
	then
		echo "external init.d ran already" >> $ADVBOOT_LOG
		echo "skipping external init.d execution" >> $ADVBOOT_LOG
		rm -rf /system/AdvBoot/extinitran
	else
		if [ -e $AdvancedBootExternalInitdPath ] 
		then
			echo "running external init.d scripts" >> $ADVBOOT_LOG
			$BUSYBOX run-parts $AdvancedBootExternalInitdPath
		else
			$BUSYBOX mkdir -p $AdvancedBootExternalInitdPath
			cp -f /system/AdvBoot/00ADVBOOTEXTINIT $AdvancedBootExternalInitdPath
			chmod -r 777 $AdvancedBootExternalInitdPath
		fi
	fi
fi	

if [ $AdvancedBootEnableBootAnimation == 0 ]
then
	echo "disabling boot animation" >> $ADVBOOT_LOG
	setprop debug.sf.nobootanimation 1
fi	

if [ $AdvancedBootEnableBootSounds == 0 ]
then
	if [ -e /system/media/audio/ui/PowerOn.ogg.adv ]
	then
		mv "/system/media/audio/ui/PowerOn.ogg.adv" "/system/media/audio/ui/PowerOn.ogg"
	fi
	if [ -e /system/media/audio/ui/PowerOff.ogg.adv ]
	then
		mv "/system/media/audio/ui/PowerOff.ogg.adv" "/system/media/audio/ui/PowerOff.ogg"
	fi
fi	
if [ $AdvancedBootEnableBootSounds == 1 ]
then
	if [ -e /system/media/audio/ui/PowerOn.ogg ]
	then
		mv "/system/media/audio/ui/PowerOn.ogg" "/system/media/audio/ui/PowerOn.ogg.adv"
	fi
	if [ -e /system/media/audio/ui/PowerOff.ogg ]
	then
		mv "/system/media/audio/ui/PowerOff.ogg" "/system/media/audio/ui/PowerOff.ogg.adv"
	fi
fi	

if [ $AdvancedBootNoCallDelay == 1 ]
then
	echo "enabling no call delay" >> $ADVBOOT_LOG
	setprop ro.lge.proximity.delay 25
	setprop mot.proximity.delay 25
	setprop ro.telephony.call_ring.delay 0
	setprop ring.delay 0
fi	

if [ $AdvancedBootImproveMediaQuallity == 1 ]
then
	echo "enabling better media quallity" >> $ADVBOOT_LOG
	setprop ro.media.dec.jpeg.memcap 8000000
	setprop ro.media.enc.hprof.vid.bps 8000000
	setprop ro.media.enc.jpeg.quality 100
	setprop ro.media.panorama.defres 3264x1840
	setprop ro.media.panorama.frameres 1280x720
	setprop ro.camcorder.videoModes true
	setprop debug.sf.hw 1
fi	

if [ $AdvancedBootEnableWmaPlayback == 1 ]
then
	echo "enabling WMA audio playback" >> $ADVBOOT_LOG
	setprop ro.media.dec.aud.wma.enabled 1
fi	
if [ $AdvancedBootEnableWmvPlayback == 1 ]
then
	echo "enabling WMV vidio playback" >> $ADVBOOT_LOG
	setprop ro.media.dec.vid.wmv.enabled 1
fi	

if [ $AdvancedBootEnableFasterStreaming == 1 ]
then
	echo "enabling faster streaming" >> $ADVBOOT_LOG
	setprop media.stagefright.enable-player true 
	setprop media.stagefright.enable-meta true 
	setprop media.stagefright.enable-scan true
	setprop media.stagefright.enable-http true
	setprop media.stagefright.enable-record false
fi	

if [ $AdvancedBootEnableAdbNotification == 0 ]
then
	echo "disabling system ADB notification" >> $ADVBOOT_LOG
	setprop "persist.adb.notify" 0
fi	

if [ $AdvancedBootBatteryTweaks == 1 ]
then
	echo "applying battery tweaks" >> $ADVBOOT_LOG
	echo "400" > /proc/sys/vm/dirty_expire_centisecs
	echo "1000" > /proc/sys/vm/dirty_writeback_centisecs
	setprop pm.sleep_mode 1
	setprop ro.ril.disable.power.collapse 0
	setprop ro.ril.fast.dormancy.rule 0
fi	

if [ $AdvancedBootSdcardReadAhead == 1 ]
then
	echo "applying sdcard readahead to $AdvancedBootSdcardReadAheadValue" >> $ADVBOOT_LOG
	echo "$AdvancedBootSdcardReadAheadValue" > "/sys/devices/virtual/bdi/179:0/read_ahead_kb"
fi	

if [ $AdvancedBootEnableBackup == 1 ]
then
	if [ $AdvancedBootBackupUserSettings == 1 ]
	then
		echo "backing up users" >> $ADVBOOT_LOG
		if [ -e /data/system/users ]
		then
			AdvancedBootBackupUserSettings=/data/system/users
		fi
	else
		AdvancedBootBackupUserSettings=" "
	fi	
	if [ $AdvancedBootBackupBatteryStats == 1 ]
	then
		echo "backing up battery stats" >> $ADVBOOT_LOG
		if [ -e /data/system/batterystats.bin ]
		then
			AdvancedBootBackupBatteryStats=/data/system/batterystats.bin
		fi
	else
		AdvancedBootBackupBatteryStats=" "
	fi	
	if [ $AdvancedBootBackupPhilzSettings == 1 ]
	then
		echo "backing up philz settings" >> $ADVBOOT_LOG
		if [ -e /data/philz-touch ]
		then
			AdvancedBootBackupPhilzSettings=/data/philz-touch
		fi
		if [ -e /cache/philz-touch ]
		then
			if [ $AdvancedBootBackupPhilzSettings == /data/philz-touch ]
			then
				AdvancedBootBackupPhilzSettings=/data/philz-touch /cache/philz-touch
			else
				AdvancedBootBackupPhilzSettings=/cache/philz-touch
			fi
		fi
	else
		AdvancedBootBackupPhilzSettings=" "
	fi	
	if [ $AdvancedBootBackupDownloadedApps == 1 ]
	then
		echo "backing up downloaded apps" >> $ADVBOOT_LOG
		if [ -e /data/app ]
		then
			AdvancedBootBackupDownloadedApps=/data/app
		fi
	else
		AdvancedBootBackupDownloadedApps=" "
	fi	
	if [ $AdvancedBootBackupBluetoothSettings == 1 ]
	then
		echo "backing up bluetooth settings" >> $ADVBOOT_LOG
		if [ -e /data/misc/bluedroid ]
		then
			AdvancedBootBackupBluetoothSettings=/data/misc/bluedroid
		fi
		if [ -e /data/misc/bluetooth ]
		then
			if [ $AdvancedBootBackupBluetoothSettings == /data/misc/bluedroid ]
			then
				AdvancedBootBackupBluetoothSettings="/data/misc/bluedroid /data/misc/bluetooth"
			else
				AdvancedBootBackupBluetoothSettings=/data/misc/bluetooth
			fi
		fi
	else
		AdvancedBootBackupBluetoothSettings=" "
	fi	
	if [ $AdvancedBootBackupWifiSettings == 1 ]
	then
		echo "backing up wifi settings" >> $ADVBOOT_LOG
		if [ -e "/data/misc/wifi" ]
		then
			AdvancedBootBackupWifiSettings=$(ls /data/misc/wifi/*.conf)
		fi
	else
		AdvancedBootBackupWifiSettings=" "
	fi	
	if [ -e $ADVBOOT_BACKUP ]
	then
		rm -rf $ADVBOOT_BACKUP
	fi
	$BUSYBOX tar -cz $AdvancedBootBackupUserSettings $AdvancedBootBackupBatteryStats $AdvancedBootBackupPhilzSettings $AdvancedBootBackupDownloadedApps $AdvancedBootBackupBluetoothSettings $AdvancedBootBackupWifiSettings -f $ADVBOOT_BACKUP
fi

if [ $AdvancedBootDalvikToCache == 1 ]
then
	CACHESIZE=$($BUSYBOX df -k /cache | $BUSYBOX tail -n1 | $BUSYBOX tr -s ' ' | $BUSYBOX cut -d ' ' -f2)
	if [ $CACHESIZE -gt 100000 ]
	then
		echo "moving dalvik-cache to cache" >> $ADVBOOT_LOG
		if [ -e /cache/dalvik-cache ]
		then
        rm -rf /cache/dalvik-cache /data/dalvik-cache
		mkdir /cache/dalvik-cache /data/dalvik-cache
		fi
		chown 1000:1000 /cache/dalvik-cache
		chmod 0771 /cache/dalvik-cache
		$MOUNT -o bind /cache/dalvik-cache /data/dalvik-cache
		chown 1000:1000 /data/dalvik-cache
		chmod 0771 /data/dalvik-cache
	else
		echo "cache $CACHESIZE is too small" >> $ADVBOOT_LOG
		echo "skipping dalvik-cache to cache" >> $ADVBOOT_LOG
	fi
fi	

if [ $AdvancedBootDpiModding == 0 ]
then
	if [ -e /system/AdvBoot/orig.dpi ]
	then
		DPIFLAG=$(grep lcd_density= /system/AdvBoot/orig.dpi | $BUSYBOX cut -d '=' -f1)
		ORIGDPI=$(grep lcd_density= /system/AdvBoot/orig.dpi | $BUSYBOX cut -d '=' -f2)
		PREVDPI=$(grep lcd_density= /system/build.prop)
		$BUSYBOX sed -i s/$PREVDPI/$DPIFLAG=$ORIGDPI/g /system/build.prop
		rm -rf /system/AdvBoot/orig.dpi
		chmod 644 /system/build.prop
	fi
else
	chmod 644 /system/build.prop
fi

if [ $AdvancedBootDpiModding == 1 ]
then
	DPIFLAG=$(grep lcd_density= /system/build.prop | $BUSYBOX cut -d '=' -f1)
	PREVDPI=$(grep lcd_density= /system/build.prop | $BUSYBOX cut -d '=' -f2)
	if [ -e /system/AdvBoot/orig.dpi ]
	then
		$BUSYBOX sed -i s/$DPIFLAG=$PREVDPI/$DPIFLAG=$AdvancedBootCustomDpi/g /system/build.prop
		chmod 644 /system/build.prop
	else
		echo "$DPIFLAG=$PREVDPI" >> /system/AdvBoot/orig.dpi
		$BUSYBOX sed -i s/$DPIFLAG=$PREVDPI/$DPIFLAG=$AdvancedBootCustomDpi/g /system/build.prop
		chmod 644 /system/build.prop
	fi
	echo "applied custom dpi $AdvancedBootCustomDpi" >> $ADVBOOT_LOG
fi

if [ $AdvancedBootUseGoogleDns == 1 ]
then
	echo "using googles DNS server" >> $ADVBOOT_LOG
	setprop net.dns1 8.8.8.8
	setprop net.dns2 8.8.4.4 
	setprop net.ppp0.dns1 8.8.8.8
	setprop net.ppp0.dns2 8.8.4.4 
fi	

if [ $AdvancedBootEnableFastReboot == 1 ]
then
	echo "enabling fast reboot" >> $ADVBOOT_LOG
	setprop persist.sys.shutdown.mode hibernate
	setprop ro.config.hw_quickpoweron true
fi	

if [ $AdvancedBootIncreaseResponse == 1 ]
then
	echo "increasing device responsiveness" >> $ADVBOOT_LOG
	setprop windowsmgr.max_events_per_sec 90
	setprop ro.max.fling_velocity 12000
	setprop ro.min.fling_velocity 9000
	setprop debug.performance.tuning 1
	setprop video.accelerate.hw 1
fi	

if [ $AdvancedBootSysPerformanceTweaks == 1 ]
then
	echo "increasing system performance" >> $ADVBOOT_LOG
	echo "2048,3072,4608,6912,10368,15552" > /sys/module/lowmemorykiller/parameters/minfree
	echo "90" > /proc/sys/vm/dirty_ratio
	echo "70" > /proc/sys/vm/dirty_background_ratio
	echo "0" > /proc/sys/vm/swappiness
	echo "50" > /proc/sys/vm/vfs_cache_pressure
	setprop persist.sys.purgeable_assets 1
	setprop persist.sys.profiler_ms 1
	setprop ro.minios.enable 1
	setprop profiler.force_disable_err_rpt 1
	setprop profiler.force_disable_ulog 1
	setprop ro.mot.eri.losalert.delay 1000
fi	

if [ $AdvancedBootEnableDalvikBitcode == 0 ]
then
	echo "disablong dalvik bitcode verification" >> $ADVBOOT_LOG
	setprop dalvik.vm.verify-bytecode false
	setprop dalvik.vm.dexopt-flags v=n,o=v
fi	


echo "advanced boot finished $date" >> $ADVBOOT_LOG
echo  >> $ADVBOOT_LOG
if [ -e $ADVBOOT_LOG ]
then
	if [ -e $ADVBOOT_WORK/advboot.log ]
	then
		rm -rf $ADVBOOT_WORK/advboot.log
		cp $ADVBOOT_LOG $ADVBOOT_WORK/advboot.log
	else
		cp $ADVBOOT_LOG $ADVBOOT_WORK/advboot.log
	fi
fi

if [ -e /system/AdvBoot/kernel-implemented ]
then
	rm -rf /system/AdvBoot/kernel-implemented
else
	if [ -e /system/AdvBoot/rom-implemented ]
	then
		rm -rf /system/AdvBoot/rom-implemented
	fi
fi

if [ $AdvancedBootEnableSystemAutomount == 1 ]
then
	echo "keeping system mounted as rw"
else
	echo "mounting system as ro"
	$MOUNT -o remount,ro /system
fi
if [ $AdvancedBootEnableDataAutomount == 1 ]
then
	echo "keeping data mounted as rw"
else
	echo "mounting data as ro"
	$MOUNT -o remount,ro /data
fi

exit 
	