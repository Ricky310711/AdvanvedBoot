#!/system/AdvBoot/xbin/busybox sh

DEFAULT_PREFS=/system/AdvBoot/prefs/boot.prefs
SYSTEM_PREFS=/system/boot.prefs
ADVBOOT_WORK=/sdcard/AdvBoot
USER_PREFS=$ADVBOOT_WORK/boot.prefs
ADVBOOT_BACKUP=$ADVBOOT_WORK/backups/backup.tar
ADVBOOT_LOG=/data/advboot.log
BUSYBOX=/system/AdvBoot/xbin/busybox
DATE=$(date)

if [ -e /system/bin/mount ] 
then
	MOUNT="/system/bin/mount"
else
	if [ -e /system/bin/busybox ]
	then
		MOUNT="/system/bin/busybox mount"
	else
		if [ -e /system/AdvBoot/xbin/busybox ]
		then
			MOUNT="/system/AdvBoot/xbin/busybox mount"
		fi
	fi
fi
if [ ! -e $ADVBOOT_WORK ]
then
	mkdir -p $ADVBOOT_WORK
fi
$MOUNT -o remount,rw /system
$MOUNT -o remount,rw /data

chmod 777 $DEFAULT_PREFS
sh "$DEFAULT_PREFS"
BOOTPREFS=DEFAULT
if [ -e "$SYSTEM_PREFS" ] 
then
	chmod 777 $SYSTEM_PREFS
	sh "$SYSTEM_PREFS"
	BOOTPREFS=SYSTEM
else
	$BUSYBOX cp -f $DEFAULT_PREFS $SYSTEM_PREFS
	chmod 777 $SYSTEM_PREFS
	sh "$SYSTEM_PREFS"
	BOOTPREFS=SYSTEM
fi
if [ $AdvancedBootUserConfigurable == 1 ]
then
	if [ -e "$USER_PREFS" ]
	then
		chmod 777 $USER_PREFS
		sh "$USER_PREFS"
		BOOTPREFS=USER
	else
		if [ -e "$SYSTEM_PREFS" ] 
		then
			$BUSYBOX cp -f "$SYSTEM_PREFS" "$USER_PREFS"
			chmod 777 $USER_PREFS
		else
			$BUSYBOX cp -f "$DEFAULT_PREFS" "$USER_PREFS"
			chmod 777 $USER_PREFS
		fi
		sh "$USER_PREFS"
		BOOTPREFS=USER
	fi
fi

if [ $AdvancedBootEnabled == 1 ]
then
	echo "running advanced boot" >> $ADVBOOT_LOG
else
	echo "advanced boot disabled" >> $ADVBOOT_LOG
	echo "exiting advanced boot" >> $ADVBOOT_LOG
	exit
fi

if [ $AdvancedBootEnableAutoRestore == 1 ]
then
	if [ ! -e $ADVBOOT_LOG ]
	then
		if [ -e $ADVBOOT_BACKUP ]
		then
			tar -xf $ADVBOOT_BACKUP
			cp $ADVBOOT_WORK/advboot.log $ADVBOOT_LOG
			echo "autorestore process complete" >> $ADVBOOT_LOG
		fi
	fi
fi

echo "starting advanced boot log at $DATE $TIME" >> $ADVBOOT_LOG
echo "system and data remounted as rw" >> $ADVBOOT_LOG
echo "applied $BOOTPREFS preferences" >> $ADVBOOT_LOG

if [ $AdvancedBootInitd == 1 ];
then
	if [ -e  /system/AdvBoot/initran ];
	then
		echo "init.d ran already" >> $ADVBOOT_LOG
		echo "skipping init.d execution" >> $ADVBOOT_LOG
		rm -rf /system/AdvBoot/initran
	else
		if [ -e $AdvancedBootInitdPath ];
		then
			echo "running init.d scripts" >> $ADVBOOT_LOG
			$BUSYBOX run-parts $AdvancedBootInitdPath
		else
			$BUSYBOX mkdir -p $AdvancedBootInitdPath
			$BUSYBOX cp -f /system/AdvBoot/00ADVBOOTINIT $AdvancedBootInitdPath
			chmod -r 777 $AdvancedBootInitdPath
		fi
	fi
fi	
if [ $AdvancedBootExternalInitd == 1 ]
then
	if [ -e /system/AdvBoot/extinitran ]
	then
		echo "external init.d ran already" >> $ADVBOOT_LOG
		echo "skipping external init.d execution" >> $ADVBOOT_LOG
		rm -rf /system/AdvBoot/extinitran
	else
		if [ -e $AdvancedBootExternalInitdPath ] 
		then
			echo "running external init.d scripts" >> $ADVBOOT_LOG
			$BUSYBOX run-parts $AdvancedBootExternalInitdPath
		else
			$BUSYBOX mkdir -p $AdvancedBootExternalInitdPath
			$BUSYBOX cp -f /system/AdvBoot/00ADVBOOTEXTINIT $AdvancedBootExternalInitdPath
			chmod -r 777 $AdvancedBootExternalInitdPath
		fi
	fi
fi	

if [ $AdvancedBootDalvikToCache == 1 ]
then
	CACHESIZE=$($BUSYBOX df -k /cache | $BUSYBOX tail -n1 | $BUSYBOX tr -s ' ' | $BUSYBOX cut -d ' ' -f2)
	if [ $CACHESIZE -gt 100000 ]
	then
		echo "cache $CACHESIZE is big enough" >> $ADVBOOT_LOG
		echo "moving dalvik-cache to cache" >> $ADVBOOT_LOG
		if [ -e /cache/dalvik-cache ]
		then
			mv /data/dalvik-cache /cache/dalvik-cache 
		fi
		chown 1000:1000 /cache/dalvik-cache
		chmod 0771 /cache/dalvik-cache
		$MOUNT mount -o bind /cache/dalvik-cache /data/dalvik-cache
		chown 1000:1000 /data/dalvik-cache
		chmod 0771 /data/dalvik-cache
	else
		echo "cache $CACHESIZE is too small" >> $ADVBOOT_LOG
		echo "skipping dalvik-cache to cache" >> $ADVBOOT_LOG
	fi
fi	

if [ $AdvancedBootBatteryTweaks == 1 ]
then
	echo "applying battery tweaks" >> $ADVBOOT_LOG
	echo "400" > /proc/sys/vm/dirty_expire_centisecs
	echo "1000" > /proc/sys/vm/dirty_writeback_centisecs
fi	

if [ $AdvancedBootSdcardReadAhead == 1 ]
then
	echo "applying sdcard readahead to $AdvancedBootSdcardReadAheadValue" >> $ADVBOOT_LOG
	echo "$AdvancedBootSdcardReadAheadValue" > /sys/devices/virtual/bdi/179:0/read_ahead_kb
fi	

if [ $AdvancedBootEnableBootAnimation == 1 ]
then
	echo "disabling boot animation" >> $ADVBOOT_LOG
	setprop debug.sf.nobootanimation 1
fi	

if [ $AdvancedBootEnableBootSounds == 0 ]
then
	if [ -e /system/media/audio/ui/PowerOn.ogg.adv ]
	then
		mv "/system/media/audio/ui/PowerOn.ogg.adv" "/system/media/audio/ui/PowerOn.ogg"
	fi
	if [ -e /system/media/audio/ui/PowerOff.ogg.adv ]
	then
		mv "/system/media/audio/ui/PowerOff.ogg.adv" "/system/media/audio/ui/PowerOff.ogg"
	fi
fi	
if [ $AdvancedBootEnableBootSounds == 1 ]
then
	if [ -e /system/media/audio/ui/PowerOn.ogg ]
	then
		mv "/system/media/audio/ui/PowerOn.ogg" "/system/media/audio/ui/PowerOn.ogg.adv"
	fi
	if [ -e /system/media/audio/ui/PowerOff.ogg ]
	then
		mv "/system/media/audio/ui/PowerOff.ogg" "/system/media/audio/ui/PowerOff.ogg.adv"
	fi
fi	

if [ $AdvancedBootDpiModding == 0 ]
then
	if [ -e /system/AdvBoot/orig.dpi ]
	then
		ORIGDPI=$($BUSYBOX grep lcd_density= /system/AdvBoot/orig.dpi | $BUSYBOX cut -d '=' -f2)
		DPIFLAG=$($BUSYBOX grep lcd_density= /system/AdvBoot/orig.dpi | $BUSYBOX cut -d '=' -f2)
		PREVDPI=$($BUSYBOX grep lcd_density= /system/build.prop | $BUSYBOX cut -d '=' -f2)
		chmod 644 /system/build.prop
	fi
else
	chmod 644 /system/build.prop
fi

if [ $AdvancedBootDpiModding == 1 ]
then
	DPIFLAG=$($BUSYBOX grep lcd_density= /system/build.prop | $BUSYBOX cut -d '=' -f1)
	PREVDPI=$($BUSYBOX grep lcd_density= /system/build.prop | $BUSYBOX cut -d '=' -f2)
	if [ -e /system/AdvBoot/orig.dpi ]
	then
		$BUSYBOX sed -i s/$DPIFLAG=$PREVDPI/$DPIFLAG=$AdvancedBootCustomDpi/g /system/build.prop
		chmod 644 /system/build.prop
	else
		echo "$DPIFLAG=$PREVDPI" >> /system/AdvBoot/orig.dpi
		$BUSYBOX sed -i s/$DPIFLAG=$PREVDPI/$DPIFLAG=$AdvancedBootCustomDpi/g /system/build.prop
		chmod 644 /system/build.prop
	fi
fi
		

if [ $AdvancedBootEnableBackup == 1 ]
	if [ $AdvancedBootBackupUserSettings == 1 ]
	then
		echo "backing up users" >> $ADVBOOT_LOG
		if [ -e /data/system/users ]
		then
			AdvancedBootBackupUserSettings=/data/system/users
		fi
	else
		AdvancedBootBackupUserSettings=" "
	fi	
	if [ $AdvancedBootBackupBatteryStats == 1 ]
	then
		echo "backing up battery stats" >> $ADVBOOT_LOG
		if [ -e /data/system/batterystats.bin ]
		then
			AdvancedBootBackupBatteryStats=/data/system/batterystats.bin
		fi
	else
		AdvancedBootBackupBatteryStats=" "
	fi	
	if [ $AdvancedBootBackupPhilzSettings == 1 ]
	then
		echo "backing up philz settings" >> $ADVBOOT_LOG
		if [ -e /data/philz-touch ]
		then
			AdvancedBootBackupPhilzSettings=/data/philz-touch
		fi
		if [ -e /cache/philz-touch ]
		then
			if [ $AdvancedBootBackupPhilzSettings == /data/philz-touch ]
			then
				AdvancedBootBackupPhilzSettings=/data/philz-touch /cache/philz-touch
			else
				AdvancedBootBackupPhilzSettings=/cache/philz-touch
			fi
		fi
	else
		AdvancedBootBackupPhilzSettings=" "
	fi	
	if [ $AdvancedBootBackupDownloadedApps == 1 ]
	then
		echo "backing up downloaded apps" >> $ADVBOOT_LOG
		if [ -e /data/app ]
		then
			AdvancedBootBackupDownloadedApps=/data/app
		fi
	else
		AdvancedBootBackupDownloadedApps=" "
	fi	
	if [ $AdvancedBootBackupBluetoothSettings == 1 ]
	then
		echo "backing up bluetooth settings" >> $ADVBOOT_LOG
		if [ -e /data/misc/bluedroid ]
		then
			AdvancedBootBackupBluetoothSettings=/data/misc/bluedroid
		fi
		if [ -e /data/misc/bluetooth ]
		then
			if [ $AdvancedBootBackupBluetoothSettings == /data/misc/bluedroid ]
			then
				AdvancedBootBackupBluetoothSettings=/data/misc/bluedroid /data/misc/bluetooth
			else
				AdvancedBootBackupBluetoothSettings=/data/misc/bluetooth
			fi
		fi
	else
		AdvancedBootBackupBluetoothSettings=" "
	fi	
	if [ $AdvancedBootBackupWifiSettings == 1 ]
	then
		echo "backing up wifi settings" >> $ADVBOOT_LOG
		if [ -e /data/misc/wifi ]
		then
			AdvancedBootBackupWifiSettings=/data/misc/wifi/*.conf
		fi
	else
		AdvancedBootBackupWifiSettings=" "
	fi	
	if [ ! -e /sdcard/AdvBootBackups ]
	then
		mkdir /sdcard/AdvBootBackups
	fi
	if [ -e /sdcard/AdvBootBackups/backup.tar ]
	then
		rm -rf /sdcard/AdvBootBackups/backup.tar
	fi
	$BUSYBOX tar -cz $AdvancedBootBackupUserSettings $AdvancedBootBackupBatteryStats $AdvancedBootBackupPhilzSettings $AdvancedBootBackupDownloadedApps $AdvancedBootBackupBluetoothSettings $AdvancedBootBackupWifiSettings -f $ADVBOOT_BACKUP
fi

if [ -e /system/AdvBoot/kernel-implemented ]
then
	rm -rf /system/AdvBoot/kernel-implemented
else
	if [ -e /system/AdvBoot/rom-implemented ]
	then
		rm -rf /system/AdvBoot/rom-implemented
	fi
fi

echo "advanced boot finished $date" >> $ADVBOOT_LOG
echo " " >> $ADVBOOT_LOG]
if [ -e $ADVBOOT_LOG ]
then
	if [ -e $ADVBOOT_WORK/advboot.log ]
	then
		rm -rf $ADVBOOT_WORK/advboot.log
		cp $ADVBOOT_LOG $ADVBOOT_WORK/advboot.log
	else
		cp $ADVBOOT_LOG $ADVBOOT_WORK/advboot.log
	fi
fi

if [ $AdvancedBootEnableSystemAutomount == 1 ]
then
	echo "keeping system mounted as rw"
else
	echo "mounting system as ro"
	$MOUNT -o remount,ro /system
fi
if [ $AdvancedBootEnableDataAutomount == 1 ]
then
	echo "keeping data mounted as rw"
else
	echo "mounting data as ro"
	$MOUNT -o remount,ro /data
fi

exit 
	