#!/system/AdvBoot/xbin/busybox sh

DEFAULT_PREFS=/system/AdvBoot/prefs/boot.prefs
SYSTEM_PREFS=/system/boot.prefs
USER_PREFS=/sdcard/boot.prefs
ADVBOOT_LOG=/data/advboot.log
BUSYBOX=/system/AdvBoot/xbin/busybox
DATE=$(date)

if [ -e /system/bin/mount ]; then
	MOUNT="/system/bin/mount"
else
	if [ -e /system/AdvBoot/xbin/busybox ]; then
		MOUNT="/system/AdvBoot/xbin/busybox mount"
	fi
fi

if [ -e "$ADVBOOT_LOG" ] 
then
	$MOUNT -o remount,rw /system
	$MOUNT -o remount,rw /data
else
	$MOUNT -o remount,rw /system
	$MOUNT -o remount,rw /data
	echo "advanced boot first boot $DATE" >> $ADVBOOT_LOG
fi

echo "starting advanced boot log at $DATE $TIME" >> $ADVBOOT_LOG
echo "system and data remounted as rw" >> $ADVBOOT_LOG
$BUSYBOX chmod 777 $DEFAULT_PREFS

sh "$DEFAULT_PREFS"
echo "loading default preferences" >> $ADVBOOT_LOG
if [ -e "$SYSTEM_PREFS" ] 
then
	$BUSYBOX chmod 777 $SYSTEM_PREFS
	sh "$SYSTEM_PREFS"
	echo "loading system preferences" >> $ADVBOOT_LOG
	echo "default preferences over-ruled" >> $ADVBOOT_LOG
else
	$BUSYBOX cp -f $DEFAULT_PREFS $SYSTEM_PREFS
	$BUSYBOX chmod 777 $SYSTEM_PREFS
	sh "$SYSTEM_PREFS"
	echo "loading system preferences" >> $ADVBOOT_LOG
	echo "default preferences over-ruled" >> $ADVBOOT_LOG
fi

USRCONFGRBLE=$(getprop adv.boot.user.configurable)
if [ $USRCONFGRBLE == 1 ]
then
	if [ -e "$USER_PREFS" ]
	then
		$BUSYBOX chmod 777 $USER_PREFS
		sh "$USER_PREFS"
		echo "loading user preferences" >> $ADVBOOT_LOG
		echo "system preferences over-ruled" >> $ADVBOOT_LOG
	else
		if [ -e "$SYSTEM_PREFS" ] 
		then
			$BUSYBOX cp -f "$SYSTEM_PREFS" "$USER_PREFS"
			$BUSYBOX chmod 777 $USER_PREFS
		else
			$BUSYBOX cp -f "$DEFAULT_PREFS" "$USER_PREFS"
			$BUSYBOX chmod 777 $USER_PREFS
		fi
		sh "$USER_PREFS"
		echo "loading system preferences" >> $ADVBOOT_LOG
		echo "default preferences over-ruled" >> $ADVBOOT_LOG
	fi
fi

echo "applied $BOOTPREFS preferences" >> $ADVBOOT_LOG

ADVBOOT=$(getprop adv.boot.enabled)

INITD=$(getprop adv.boot.initd)
INITDPATH=$(getprop adv.boot.initd.path)

EXTINITD=$(getprop adv.boot.external.initd)
EXTINITDPATH=$(getprop adv.boot.external.initd.path)

# ZIPALIGN=$(getprop adv.boot.zipalign.onboot)

DALVIK2CACHE=$(getprop adv.boot.dalviktocache)

BTRYTWKS=$(getprop adv.boot.battery.tweaks)

#BOOTANIM=$(getprop adv.boot.bootanimation)
#BOOTSNDS=$(getprop adv.boot.bootsounds)

#DPIMODDING=$(getprop adv.boot.dpimodding)
#CUSTDPI=$(getprop adv.boot.customdpi)

SDCARDREADAHEAD=$(getprop adv.boot.sdcard.readahead)
SDCARDREADAHEADVALUE=$(getprop adv.boot.sdcard.readahead.value)

SETTINGSBKP=$(getprop adv.boot.backup.enable)
BUPUSERSTTINGS$(getprop adv.boot.backup.user.settings)
BUPBTTRYSTATS$(getprop adv.boot.backup.battery.stats)
BUPPHILZSTTINGS$(getprop adv.boot.backup.philz.settings)
BUPDWNLDAPPS$(getprop adv.boot.backup.downloaded.apps)
BUPBLTOOTHSTTNGS$(getprop adv.boot.backup.bluetooth.settings)
BUPWIFISTTNGS$(getprop adv.boot.backup.wifi.settings)

SYSAUTOMNT=$(getprop adv.boot.system.automount)
DATAUTOMNT=$(getprop adv.boot.data.automount)

if [ $ADVBOOT == 1 ]
then
	echo "running advanced boot" >> $ADVBOOT_LOG
else
	echo "advanced boot disabled" >> $ADVBOOT_LOG
	echo "exiting advanced boot" >> $ADVBOOT_LOG
	exit
fi

if [ $INITD == 1 ];
then
	if [ -e  /system/AdvBoot/initran ];
	then
		echo "init.d ran already" >> $ADVBOOT_LOG
		echo "skipping init.d execution" >> $ADVBOOT_LOG
		rm -rf /system/AdvBoot/initran
	else
		if [ -e "$INITDPATH" ];
		then
			echo "running init.d scripts" >> $ADVBOOT_LOG
			$BUSYBOX run-parts $INITDPATH
		else
			$BUSYBOX mkdir -p $INITDPATH
			$BUSYBOX cp -f "/system/AdvBoot/00ADVBOOTINIT" "$INITDPATH"
			$BUSYBOX chmod -r 777 $INITDPATH
		fi
	fi
fi	

if [ $INITD == 1 ]
then
	if [ -e /system/AdvBoot/extinitran ]
	then
		echo "external init.d ran already" >> $ADVBOOT_LOG
		echo "skipping external init.d execution" >> $ADVBOOT_LOG
		rm -rf /system/AdvBoot/extinitran
	else
		if [ -e "$EXTINITDPATH" ] 
		then
			echo "running external init.d scripts" >> $ADVBOOT_LOG
			$BUSYBOX run-parts $EXTINITDPATH
		else
			$BUSYBOX mkdir -p $EXTINITDPATH
			$BUSYBOX cp -f "/system/AdvBoot/00ADVBOOTEXTINIT" "$EXTINITDPATH"
			$BUSYBOX chmod -r 777 $EXTINITDPATH
		fi
	fi
fi	

if [ $DALVIK2CACHE == 1 ]
then
	CACHESIZE=$($BUSYBOX df -k /cache | $BUSYBOX tail -n1 | $BUSYBOX tr -s ' ' | $BUSYBOX cut -d ' ' -f2)
	if [ $CACHESIZE -gt 100000 ]
	then
		echo "cache $CACHESIZE is big enough" >> $ADVBOOT_LOG
		echo "moving dalvik-cache to cache" >> $ADVBOOT_LOG
		if [ -e /cache/dalvik-cache ]
		then
			$BUSYBOX mv /data/dalvik-cache /cache/dalvik-cache 
		fi
		$BUSYBOX chown 1000:1000 /cache/dalvik-cache
		$BUSYBOX chmod 0771 /cache/dalvik-cache
		$BUSYBOX mount -o bind /cache/dalvik-cache /data/dalvik-cache
		$BUSYBOX chown 1000:1000 /data/dalvik-cache
		$BUSYBOX chmod 0771 /data/dalvik-cache
	else
		echo "cache $CACHESIZE is too small" >> $ADVBOOT_LOG
		echo "skipping dalvik-cache to cache" >> $ADVBOOT_LOG
	fi
fi	

if [ $BTRYTWKS == 1 ]
then
	echo "applying battery tweaks" >> $ADVBOOT_LOG
	echo "400" > /proc/sys/vm/dirty_expire_centisecs
	echo "1000" > /proc/sys/vm/dirty_writeback_centisecs
fi	

if [ $SDCARDREADAHEAD == 1 ]
then
	echo "applying sdcard readahead to $SDCARDREADAHEADVALUE" >> $ADVBOOT_LOG
	echo "$SDCARDREADAHEADVALUE" > /sys/devices/virtual/bdi/179:0/read_ahead_kb
fi	

if [ $SETTINGSBKP == 1 ]
	if [ $BUPUSERSTTINGS == 1 ]
	then
		echo "backing up users" >> $ADVBOOT_LOG
		if [ -e /data/system/users ]
		then
			USRSTTINGS=/data/system/users
		fi
	else
		USRSTTINGS=" "
	fi	
	if [ $BUPBTTRYSTATS == 1 ]
	then
		echo "backing up battery stats" >> $ADVBOOT_LOG
		if [ -e /data/system/batterystats.bin ]
		then
			BTTRYSTATS=/data/system/batterystats.bin
		fi
	else
		BTTRYSTATS=" "
	fi	
	if [ $BUPPHILZSTTINGS == 1 ]
	then
		echo "backing up philz settings" >> $ADVBOOT_LOG
		if [ -e /data/philz-touch ]
		then
			PHILZSTTINGS=/data/philz-touch
		fi
		if [ -e /cache/philz-touch ]
		then
			if [ $PHILZSTTINGS == /data/philz-touch ]
			then
				PHILZSTTINGS=/data/philz-touch /cache/philz-touch
			else
				PHILZSTTINGS=/cache/philz-touch
			fi
		fi
	else
		PHILZSTTINGS=" "
	fi	
	if [ $BUPDWNLDAPPS == 1 ]
	then
		echo "backing up downloaded apps" >> $ADVBOOT_LOG
		if [ -e /data/app ]
		then
			DWNLDAPPS=/data/app
		fi
	else
		DWNLDAPPS=" "
	fi	
	if [ $BUPBLTOOTHSTTNGS == 1 ]
	then
		echo "backing up bluetooth settings" >> $ADVBOOT_LOG
		if [ -e /data/misc/bluedroid ]
		then
			BLTOOTHSTTNGS=/data/misc/bluedroid
		fi
		if [ -e /data/misc/bluetooth ]
		then
			if [ $BLTOOTHSTTNGS == /data/misc/bluedroid ]
			then
				BLTOOTHSTTNGS=/data/misc/bluedroid /data/misc/bluetooth
			else
				BLTOOTHSTTNGS=/data/misc/bluetooth
			fi
		fi
	else
		BLTOOTHSTTNGS=" "
	fi	
	if [ $BUPWIFISTTNGS == 1 ]
	then
		echo "backing up wifi settings" >> $ADVBOOT_LOG
		if [ -e /data/misc/wifi ]
		then
			WIFISTTNGS=/data/misc/wifi/*.conf
		fi
	else
		WIFISTTNGS=" "
	fi	
	if [ ! -e /sdcard/AdvBootBackups ]
	then
		mkdir /sdcard/AdvBootBackups
	fi
	if [ -e /sdcard/AdvBootBackups/backup.tar ]
	then
		rm -rf /sdcard/AdvBootBackups/backup.tar
	fi
	$BUSYBOX tar -cz $BUPUSERSTTINGS $BUPBTTRYSTATS $BUPPHILZSTTINGS $BUPDWNLDAPPS $BUPBLTOOTHSTTNGS $BUPWIFISTTNGS -f /sdcard/AdvBootBackups/backup.tar
fi

if [ -e /system/AdvBoot/kernel-implemented ]
then
	rm -rf /system/AdvBoot/kernel-implemented
fi

if [ -e /system/AdvBoot/rom-implemented ]
then
	rm -rf /system/AdvBoot/rom-implemented
fi

echo "advanced boot finished $date" >> $ADVBOOT_LOG
echo " " >> $ADVBOOT_LOG

if [ $SYSAUTOMNT == 1 ]
then
	echo "keeping system mounted as rw"
else
	echo "mounting system as ro"
	$MOUNT -o remount,ro /system
fi

if [ $DATAUTOMNT == 1 ]
then
	echo "keeping data mounted as rw"
else
	echo "mounting data as ro"
	$MOUNT -o remount,ro /data
fi

exit 0
	